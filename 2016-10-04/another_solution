#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include <unordered_map>

using namespace std;
typedef long long ll;
#define aint(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)
#define repa(v)				lpi(i, 0, sz(v)) lpi(j, 0, sz(v[i]))
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
#define pb					push_back
#define MP					make_pair
#define all(v)			((v).begin()), ((v).end())
#define sz(v)			((int)((v).size()))
#define clr(v, d)		memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)
typedef long long ll;


int main() {
    vector<vector<int>> arr;
    int n ;
    cin >> n ;
    for(int i = 0 ; i < n ; i++) {
        vector<int > s ;
        for(int j = 0  ; j < n ; j++) {
            int x ;
            cin >> x ;
            s.push_back(x) ;
        }
        arr.push_back(s) ;
    }
    ll big = 0 ;

    for(int i = 0 ; i < n/2 ;i++) {
        for(int j=0 ; j < n/2 ; j++) {
            int node = arr[i][j] ;
            int f = arr[i][n-1-j] ;
            int s =  arr[n-1-i][j];
            int t = arr[n-1-i][n-1-j];

            big += max(max( node,f ) , max(s,t)) ;
        }
    }

    cout << big ;

    return 0 ;

}


